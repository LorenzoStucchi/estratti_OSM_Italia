{"version":3,"sources":["helpers.js","components/Italy.js","components/Breadcrumb.js","components/SideMenu/filter.js","components/SideMenu/SideMenu.js","App.js","index.js"],"names":["geoRegions","topojson","regions","geoProvinces","provinces","getProvincesFromRegionIstatCode","istatCode","features","filter","properties","reg_istat_code","type","getMunicipalitiesForProvinceIstatCode","provinceIstatCode","a","fileName","fetch","fileFetched","json","municipalities","defaultFeature","state","index","name","feature","region","province","municipality","fillDataFromProperties","selectedFeature","setSelectedFeature","setCurrentGeoJSON","setFeatureIndex","selectionFromMap","provincesInRegion","prov_istat_code_num","municipalitiesInRegion","newFeature","reg_name","prov_name","com_istat_code_num","pathColors","getPathColor","featureIndex","Italy","currentGeoJSON","geoJSONref","useRef","map","useMap","useEffect","current","bounds","getBounds","Object","entries","length","fitBounds","GeoJSON","ref","eventHandlers","click","e","layer","pathOptions","color","data","JSON","stringify","substring","Breadcrumb","className","visible","style","transform","padding","zIndex","onClick","currentFeature","parent","find","search","node","term","foundIDS","isMatching","toLowerCase","indexOf","Array","isArray","children","forEach","child","hasMatchingChild","id","push","useStyles","makeStyles","root","flexGrow","maxWidth","SideMenu","italyTree","classes","useState","expanded","setExpanded","selected","setSelected","searchFilter","setSearchFilter","searchValue","setSearchValue","resetFilter","currentName","findMunicipalityInProvince","setSelectedIstatProperties","selectedIstatProperties","featureGeometry","municipalityFeature","toExpand","searchNode","dataNode","matchedIDS","searchDebounced","useDebouncedCallback","value","onChange","target","callback","TreeView","defaultCollapseIcon","defaultExpandIcon","onNodeSelect","_","nodeIds","mapTree","includes","TreeItem","nodeId","label","onLabelClick","italyCoords","App","useMemo","previousRegions","previousProvinces","makeItalianTree","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29953e84.chunk.js","sourcesContent":["import * as topojson from \"topojson-client\";\nimport provinces from \"./static/boundaries/limits_IT_provinces.topo.json\";\nimport regions from \"./static/boundaries/limits_IT_regions.topo.json\";\nimport municipalities from \"./static/boundaries/municipalitiesMap.json\";\n\nexport const geoRegions = topojson.feature(regions, \"regions\");\nconst geoProvinces = topojson.feature(provinces, \"provinces\");\n\nconst getProvincesFromRegionIstatCode = (istatCode) => {\n  const filteredProvinces = geoProvinces.features.filter(\n    ({ properties }) => properties.reg_istat_code === istatCode\n  );\n\n  return {\n    features: filteredProvinces,\n    type: \"FeatureCollection\",\n  };\n};\n\nexport const getMunicipalitiesForProvinceIstatCode = async (\n  provinceIstatCode\n) => {\n  const fileName = `estratti_OSM_Italia/static/boundaries/limits_P_${provinceIstatCode}_municipalities.topo.json`;\n  const fileFetched = await fetch(fileName);\n  const municipalities = await fileFetched.json();\n  return topojson.feature(municipalities, \"municipalities\");\n};\n\nexport const defaultFeature = {\n  state: { index: 1, name: \"Italy\", feature: geoRegions },\n  region: { index: 2, name: \"\", feature: null },\n  province: { index: 3, name: \"\", feature: null },\n  municipality: { index: 4, name: \"\", feature: null },\n};\n\nexport const fillDataFromProperties = async (\n  feature,\n  selectedFeature,\n  setSelectedFeature,\n  setCurrentGeoJSON,\n  setFeatureIndex,\n  selectionFromMap\n) => {\n  const properties = feature.properties;\n\nconst provincesInRegion = properties.reg_istat_code ? getProvincesFromRegionIstatCode(properties.reg_istat_code): null;\nconst municipalitiesInRegion = properties.prov_istat_code_num ? await getMunicipalitiesForProvinceIstatCode(\n  properties.prov_istat_code_num\n) : null;\n\nconst newFeature = {\n  ...selectedFeature,\n  region: {\n    ...selectedFeature.region,\n    name: properties.reg_name? (properties.reg_name|| properties.name):null,\n    feature: provincesInRegion,\n    reg_istat_code: properties.reg_istat_code || null,\n  },\n  province: {\n    ...selectedFeature.province,\n    name: properties.prov_name?(properties.prov_name||properties.name):null,\n    feature: municipalitiesInRegion,\n    prov_istat_code_num: properties.prov_istat_code_num || null,\n  },\n  municipality: {\n    ...selectedFeature.municipality,\n    name:  properties.com_istat_code_num?properties.name: null,\n    feature: properties.com_istat_code_num?feature:null,\n    com_istat_code_num: properties.com_istat_code_num || null,\n  },\n  selectionFromMap,\n}\n  setSelectedFeature(newFeature);\n\n\n  switch (true) {\n    case !!properties.com_istat_code_num:\n      setCurrentGeoJSON(feature);\n      setFeatureIndex(4);\n      break;\n    case !!properties.prov_istat_code_num:\n      setCurrentGeoJSON(municipalitiesInRegion);\n      setFeatureIndex(3);\n      break;\n    case !!properties.reg_istat_code:\n      setCurrentGeoJSON(provincesInRegion);\n      setFeatureIndex(2);\n      break;\n    default:\n      setCurrentGeoJSON(geoRegions);\n      defaultFeature.selectionFromMap = selectionFromMap;\n      setSelectedFeature(defaultFeature);\n      setFeatureIndex(1);\n      break;\n  }\n};\n\nexport const makeItalianTree = () => {\n  let italyTree = {\n    name: \"Italy\",\n    children: [],\n  };\n\n  municipalities.forEach(\n    ({\n      name,\n      reg_name,\n      prov_name,\n      prov_istat_code_num,\n      reg_istat_code,\n      com_istat_code_num,\n    }) => {\n      let previousRegions = italyTree.children.find(\n        ({ name }) => name === reg_name\n      );\n\n      let previousProvinces = previousRegions\n        ? previousRegions?.children.find(({ name }) => name === prov_name)\n        : null;\n\n      if (previousProvinces) {\n        //insert municipalities\n        previousProvinces.children.push({\n          name: name,\n          reg_name,\n          prov_name,\n          com_istat_code_num,\n          prov_istat_code_num,\n          reg_istat_code,\n        });\n      } else if (previousRegions) {\n        //insert provinces\n        previousRegions.children.push({\n          name: prov_name,\n          prov_name,\n          reg_name,\n          prov_istat_code_num,\n          reg_istat_code,\n          children: [{ name: name, com_istat_code_num, prov_istat_code_num, reg_istat_code }],\n        });\n      } else {\n        //insert regions\n        italyTree.children.push({\n          name: reg_name,\n          reg_name,\n          reg_istat_code,\n          children: [\n            {\n              name: prov_name,\n              prov_name,\n              prov_istat_code_num,\n              reg_istat_code,\n              children: [\n                { name: name, com_istat_code_num, prov_istat_code_num, reg_istat_code },\n              ],\n            },\n          ],\n        });\n      }\n    }\n  );\n  return italyTree;\n};\n","import { useEffect, useRef } from \"react\";\nimport { GeoJSON, useMap } from \"react-leaflet\";\nimport { fillDataFromProperties } from \"../helpers\";\n\nconst pathColors = [\"#4a40c3\", \"#5d53dc\", \"#6b62ee\", \"#9287f7\"];\n\nconst getPathColor = (featureIndex) => {\n  return pathColors[featureIndex - 1];\n};\n\nconst Italy = ({\n  featureIndex,\n  selectedFeature,\n  setSelectedFeature,\n  setCurrentGeoJSON,\n  currentGeoJSON,\n  setFeatureIndex,\n}) => {\n  const geoJSONref = useRef();\n  const map = useMap();\n\n  useEffect(() => {\n    if (!geoJSONref.current) {\n      return;\n    }\n    const bounds = geoJSONref.current.getBounds();\n    if (!Object.entries(bounds).length) {\n      return;\n    }\n    map.fitBounds(bounds);\n  }, [currentGeoJSON, geoJSONref, map]);\n\n  return (\n    <GeoJSON\n      ref={geoJSONref}\n      eventHandlers={{\n        click: (e) => {\n          const feature = e.layer.feature;\n          fillDataFromProperties(\n            feature,\n            selectedFeature,\n            setSelectedFeature,\n            setCurrentGeoJSON,\n            setFeatureIndex,\n            true\n          );\n        },\n      }}\n      pathOptions={{ color: getPathColor(featureIndex) }}\n      key={currentGeoJSON && JSON.stringify(currentGeoJSON).substring(0, 100)}\n      data={currentGeoJSON}\n    />\n  );\n};\n\nexport default Italy;\n","import { fillDataFromProperties } from \"../helpers\";\n\nconst Breadcrumb = ({\n  selectedFeature,\n  setSelectedFeature,\n  setCurrentGeoJSON,\n  setFeatureIndex,\n  featureIndex,\n}) => {\n  return (\n    <div className=\"breadcrumb\">\n      {Object.entries(selectedFeature)\n        .filter(([, { name }]) => !!name)\n        .map(([type, { name, feature, index }]) => {\n          const visible = name && index <= featureIndex;\n          return (\n            <p\n              key={type}\n              style={{\n                transform: `translateX(${visible ? \"0%\" : \"-100%\"})`,\n                \"min-width\": `${visible ? \"100px\" : \"0px\"}`,\n                padding: `${visible ? \"6px\" : \"0px\"}`,\n                zIndex: 4 - index,\n              }}\n              className={`breadItem ${type}`}\n              onClick={() => {\n                const parent = Object.entries(selectedFeature).filter(\n                  ([, { index: mappedIndex }]) => mappedIndex === index - 1\n                );\n                let currentFeature;\n                if (!parent.length) {\n                  currentFeature = selectedFeature.state.feature;\n                  currentFeature.properties = {};\n                } else {\n                  currentFeature = parent[0][1].feature.features.find(\n                    ({ properties }) =>\n                      name ===\n                      (properties.name ||\n                        properties.prov_name ||\n                        properties.reg_name)\n                  );\n                }\n                fillDataFromProperties(\n                  currentFeature,\n                  selectedFeature,\n                  setSelectedFeature,\n                  setCurrentGeoJSON,\n                  setFeatureIndex,\n                  true\n                );\n              }}\n            >\n              {name}\n            </p>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Breadcrumb;\n","export const search = (node, term, foundIDS)=> {\n    let isMatching = term.length > 2 && node.name && node.name.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    if (Array.isArray(node.children)) {\n      node.children.forEach((child) => {\n        const hasMatchingChild = search(child, term, foundIDS);\n        isMatching = isMatching || hasMatchingChild;\n      });\n    }\n  \n    // We will add any item if it matches our search term or if it has a children that matches our term\n    if (isMatching && node.name) {\n      const id = node.com_istat_code_num || node.prov_istat_code_num || node.reg_istat_code || node.name;\n      foundIDS.push(id);\n    }\n    return isMatching;\n  }\n","/* eslint-disable no-unused-expressions */\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useEffect, useState } from \"react\";\nimport {search} from './filter';\nimport {\n  fillDataFromProperties,\n  getMunicipalitiesForProvinceIstatCode,\n} from \"../../helpers\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    maxWidth: 500,\n  },\n});\nconst SideMenu = ({\n  italyTree,\n  selectedFeature,\n  setSelectedFeature,\n  setCurrentGeoJSON,\n  setFeatureIndex,\n}) => {\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [searchFilter, setSearchFilter] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n\n\n  const resetFilter = ()=>{\n    setSearchFilter([]);\n    setSearchValue('');\n  }\n  const handleSelect = (_, nodeIds) => {\n    setSelected(nodeIds);\n  };\n\n  const currentName =\n    selectedFeature.municipality.name ||\n    selectedFeature.province.name ||\n    selectedFeature.region.name ||\n    \"Italy\";\n\nconst findMunicipalityInProvince = (currentGeoJSON,com_istat_code_num ) =>\ncurrentGeoJSON.features.find(\n  ({ properties }) =>\n    properties.com_istat_code_num ===\n    com_istat_code_num\n);\n  const setSelectedIstatProperties = async (selectedIstatProperties) => {\n   resetFilter()\n    let feature = {\n      properties: selectedIstatProperties,\n      feature: null,\n    };\n    if (selectedIstatProperties.com_istat_code_num) {\n      let municipalityFeature;\n        const featureGeometry = await getMunicipalitiesForProvinceIstatCode(\n          selectedIstatProperties.prov_istat_code_num\n        );\n        municipalityFeature = findMunicipalityInProvince(featureGeometry, selectedIstatProperties.com_istat_code_num)\n      feature = { ...feature, ...municipalityFeature };\n    } else if (selectedIstatProperties.prov_istat_code_num) {\n      const featureGeometry = await getMunicipalitiesForProvinceIstatCode(\n        selectedIstatProperties.prov_istat_code_num\n      );\n      feature.feature = featureGeometry;\n    }  \n\n    fillDataFromProperties(\n      feature,\n      selectedFeature,\n      setSelectedFeature,\n      setCurrentGeoJSON,\n      setFeatureIndex,\n      false\n    );\n  };\n\n  useEffect(() => {\n    if (!selectedFeature.selectionFromMap) {\n      return;\n    }\n   resetFilter();\n    const toExpand = [\n      ...(selectedFeature.municipality.com_istat_code_num ? [selectedFeature.municipality.com_istat_code_num]: []),\n      ...(selectedFeature.province.prov_istat_code_num ? [selectedFeature.province.prov_istat_code_num]: []),\n      ...(selectedFeature.region.reg_istat_code ? [selectedFeature.region.reg_istat_code]: []),\n      'Italy',\n    ]\n    setExpanded(toExpand);\n    setSelected(toExpand[0]);\n\n  }, [selectedFeature]);\n\n\n  \n  const searchNode= term => {\n    const dataNode = {\n      children: italyTree.children,\n    };\n    const matchedIDS = ['Italy'];\n    search(dataNode, term, matchedIDS);\n    if(matchedIDS.length >1){\n    setSearchFilter(matchedIDS)\n    } else {\n     resetFilter()\n    }\n    setExpanded(matchedIDS)\n    setSelected(matchedIDS);\n  }\n\n  const mapTree = ({name, children, ...node})=>{\n    const id = node.com_istat_code_num || node.prov_istat_code_num || node.reg_istat_code || name;\n    if(searchFilter.length && !searchFilter.includes(id)){\n      return null;\n    }\n  return (<TreeItem nodeId={id} label={name} onLabelClick={(_)=>{\n    const toExpand = [\n      ...(node.com_istat_code_num ? [node.com_istat_code_num]: []),\n      ...(node.prov_istat_code_num ? [node.prov_istat_code_num]: []),\n      ...(node.reg_istat_code ? [node.reg_istat_code]: []),\n      'Italy',\n     ]\n    setExpanded(toExpand);\n      setSelectedIstatProperties({\n        reg_name: node.reg_name,\n        prov_name: node.prov_name,\n        reg_istat_code: node.reg_istat_code,\n        prov_istat_code_num: node.prov_istat_code_num,\n        com_istat_code_num: node.com_istat_code_num,\n        name: name,\n      });\n  }}>\n    {children && children.map(mapTree)}\n  </TreeItem>)\n  }\n  const searchDebounced = useDebouncedCallback((value) => { searchNode(value) }, 500);\n\n  return (\n    <div className=\"sideMenu\">\n      <input type='text' value={searchValue} onChange={(e) => {\n        setSearchValue(e.target.value);\n        searchDebounced.callback(e.target.value);\n      }} />\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      expanded={expanded}\n      selected={selected}\n      onNodeSelect={handleSelect}\n    >\n   {mapTree(italyTree)}\n      \n    </TreeView>\n      {currentName && (\n        <div className=\"resultItem\">\n          <p>Download: {currentName}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SideMenu;\n","import \"./App.css\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { useState, useMemo } from \"react\";\nimport Italy from \"./components/Italy\";\nimport Breadcrumb from \"./components/Breadcrumb\";\nimport SideMenu from \"./components/SideMenu\";\n\nimport { makeItalianTree, defaultFeature, geoRegions } from \"./helpers\";\n\nconst italyCoords = [42, 12.5];\n\nfunction App() {\n  const italyTree = useMemo(() => makeItalianTree(), []);\n  const [currentGeoJSON, setCurrentGeoJSON] = useState(geoRegions);\n  const [selectedFeature, setSelectedFeature] = useState(defaultFeature);\n  const [featureIndex, setFeatureIndex] = useState(1);\n\n  return (\n    <div className=\"container\">\n      <Breadcrumb\n        currentGeoJSON={currentGeoJSON}\n        setCurrentGeoJSON={setCurrentGeoJSON}\n        selectedFeature={selectedFeature}\n        setSelectedFeature={setSelectedFeature}\n        setFeatureIndex={setFeatureIndex}\n        featureIndex={featureIndex}\n      />\n      <div className=\"content\">\n        <MapContainer\n          id=\"mapContainer\"\n          center={italyCoords}\n          zoom={6}\n          scrollWheelZoom={false}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Italy\n            featureIndex={featureIndex}\n            currentGeoJSON={currentGeoJSON}\n            setCurrentGeoJSON={setCurrentGeoJSON}\n            selectedFeature={selectedFeature}\n            setSelectedFeature={setSelectedFeature}\n            setFeatureIndex={setFeatureIndex}\n          />\n        </MapContainer>\n        <SideMenu\n          italyTree={italyTree}\n          currentGeoJSON={currentGeoJSON}\n          selectedFeature={selectedFeature}\n          setSelectedFeature={setSelectedFeature}\n          setCurrentGeoJSON={setCurrentGeoJSON}\n          setFeatureIndex={setFeatureIndex}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}